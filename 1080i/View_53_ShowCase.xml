<?xml version="1.0" encoding="UTF-8"?>
<includes>
  <include name="View_53_ShowCase">
    <control type="group">
      <visible>Control.IsVisible(53)</visible>
      <posy>-20</posy>
      <posx>0</posx>
      <include>ViewAnimation</include>
      <control type="group">
        <camera x="960" y="810"/>
        <control type="group" id="6001">
          <posx>55</posx>
          <posy>570</posy>
          <visible>Container.OnNext + !Skin.HasSetting(ShowCase.Flat)</visible>
          <animation effect="slide" end="-135,0" time="200" reversible="false">Hidden</animation>
          <control type="group">
            <posx>15</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-7).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <visible>Container.OnNext</visible>
            <animation effect="fade" start="100" end="0" time="200" reversible="false">Hidden</animation>
            <animation effect="rotatey" center="-135" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-7</include>
          </control>
          <control type="group">
            <posx>150</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-6).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="0" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-6</include>
          </control>
          <control type="group">
            <posx>285</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-5).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="135" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-5</include>
          </control>
          <control type="group">
            <posx>420</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-4).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="270" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-4</include>
          </control>
          <control type="group">
            <posx>555</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-3).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="405" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-3</include>
          </control>
          <control type="group">
            <posx>690</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-2).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="540" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-2</include>
          </control>
          <control type="group">
            <posx>1635</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(6).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <visible>!Container.OnNext</visible>
            <animation effect="fade" end="100" time="200" reversible="false">Visible</animation>
            <animation effect="rotatey" center="2100" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem6</include>
          </control>
          <control type="group">
            <posx>1500</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(5).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1965" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem5</include>
          </control>
          <control type="group">
            <posx>1365</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(4).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1830" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem4</include>
          </control>
          <control type="group">
            <posx>1230</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(3).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1695" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem3</include>
          </control>
          <control type="group">
            <posx>1095</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(2).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1560" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem2</include>
          </control>
          <control type="group">
            <posx>960</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(1).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1425" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem1</include>
          </control>
          <control type="group">
            <visible>Container.OnNext</visible>
            <animation effect="slide" end="75,0" time="200" reversible="false">Hidden</animation>
            <control type="group">
              <posx>825</posx>
              <visible>Container.OnNext</visible>
              <visible>!IsEmpty(Container(53).ListItemNoWrap(0).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
              <animation effect="rotatey" center="1290" end="-55" time="200" reversible="false" tween="quadratic" easing="in">Hidden</animation>
              <animation effect="rotatey" center="1290" start="55" end="55" time="0" condition="true">Conditional</animation>
              <include>MovieShowCaseItem0</include>
            </control>
            <control type="group">
              <posx>758</posx>
              <visible>!IsEmpty(Container(53).ListItemNoWrap(-1).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
              <visible>Container.OnNext</visible>
              <animation effect="rotatey" center="608" end="-55" time="200" reversible="false" tween="quadratic">Hidden</animation>
              <control type="image">
                <texture diffuse="thumbs/thumb_mask.png" fallback="DefaultVideo.png">$VAR[ShowcaseItem-1Var]</texture>
                <include>MovieShowcaseThumb</include>
              </control>
              <control type="image">
                <texture>thumbs/boxes/$VAR[ShowcaseCase-1Var]</texture>
                <include>MovieSchowcaseDVDCoverVars</include>
                <visible>Skin.HasSetting(toggleshowcasecovers)</visible>
              </control>
              <control type="image">
                <include>WatchedOverlayShowCase</include>
                <texture>$VAR[IconOverlay-1Var]</texture>
                <visible>!Skin.HasSetting(Enable.Circles)</visible>
              </control>
              <control type="image">
                <posx>230</posx>
                <posy>22</posy>
                <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
                <width>36</width>
                <height>36</height>
                <aspectratio>keep</aspectratio>
                <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
                <texture>$VAR[IconOverlay-1Var]</texture>
              </control>
              <control type="image">
                <posx>230</posx>
                <posy>348</posy>
                <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
                <width>36</width>
                <height>36</height>
                <aspectratio>keep</aspectratio>
                <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
                <texture>$VAR[IconOverlay-1Var]</texture>
              </control>
              <control type="group">
                <posx>28</posx>
                <posy>22</posy>
                <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-1</include>
              </control>
              <control type="group">
                <posx>28</posx>
                <posy>348</posy>
                <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-1</include>
              </control>
              <control type="image">
                <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="DefaultVideo.png">$VAR[ShowcaseItem-1Var]</texture>
                <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
                <include>MovieShowcaseThumbReflection</include>
              </control>
            </control>
          </control>
        </control>
        <control type="group" id="6002">
          <posx>55</posx>
          <posy>570</posy>
          <visible>Container.OnPrevious + !Skin.HasSetting(ShowCase.Flat)</visible>
          <animation effect="slide" end="135,0" time="200" reversible="false">Hidden</animation>
          <control type="group">
            <posx>1500</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(7).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <visible>Container.OnPrevious</visible>
            <animation effect="fade" start="100" end="0" time="200" reversible="false">Hidden</animation>
            <animation effect="rotatey" center="1965" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem7</include>
          </control>
          <control type="group">
            <posx>1365</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(6).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1830" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem6</include>
          </control>
          <control type="group">
            <posx>1230</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(5).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1695" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem5</include>
          </control>
          <control type="group">
            <posx>1095</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(4).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1560" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem4</include>
          </control>
          <control type="group">
            <posx>960</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(3).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1425" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem3</include>
          </control>
          <control type="group">
            <posx>825</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(2).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1290" start="55" end="55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem2</include>
          </control>
          <control type="group">
            <posx>-120</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-6).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <visible>!Container.OnPrevious</visible>
            <animation effect="fade" end="100" time="200" reversible="false">Visible</animation>
            <animation effect="rotatey" center="-270" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-6</include>
            <control type="image">
              <texture>thumbs/boxes/$VAR[ShowcaseCase-6Var]</texture>
              <include>MovieSchowcaseDVDCoverVars</include>
            </control>
          </control>
          <control type="group">
            <posx>15</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-5).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="-135" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-5</include>
            <control type="image">
              <texture>thumbs/boxes/$VAR[ShowcaseCase-5Var]</texture>
              <include>MovieSchowcaseDVDCoverVars</include>
            </control>
          </control>
          <control type="group">
            <posx>150</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-4).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="0" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-4</include>
            <control type="image">
              <texture>thumbs/boxes/$VAR[ShowcaseCase-4Var]</texture>
              <include>MovieSchowcaseDVDCoverVars</include>
            </control>
          </control>
          <control type="group">
            <posx>285</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-3).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="135" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-3</include>
            <control type="image">
              <texture>thumbs/boxes/$VAR[ShowcaseCase-3Var]</texture>
              <include>MovieSchowcaseDVDCoverVars</include>
            </control>
          </control>
          <control type="group">
            <posx>420</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-2).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="270" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-2</include>
            <control type="image">
              <texture>thumbs/boxes/$VAR[ShowcaseCase-2Var]</texture>
              <include>MovieSchowcaseDVDCoverVars</include>
            </control>
          </control>
          <control type="group">
            <posx>555</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-1).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="405" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <include>MovieShowCaseItem-1</include>
            <control type="image">
              <texture>thumbs/boxes/$VAR[ShowcaseCase-1Var]</texture>
              <include>MovieSchowcaseDVDCoverVars</include>
            </control>
          </control>
          <control type="group">
            <visible>Container.OnPrevious</visible>
            <animation effect="slide" end="-75,0" time="200" reversible="false">Hidden</animation>
            <control type="group">
              <posx>690</posx>
              <visible>Container.OnPrevious</visible>
              <visible>!IsEmpty(Container(53).ListItemNoWrap(0).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
              <animation effect="rotatey" center="540" end="55" time="200" reversible="false" tween="quadratic" easing="in">Hidden</animation>
              <animation effect="rotatey" center="540" start="-55" end="-55" time="0" condition="true">Conditional</animation>
              <include>MovieShowCaseItem0</include>
            </control>
            <control type="group">
              <posx>758</posx>
              <visible>!IsEmpty(Container(53).ListItemNoWrap(1).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
              <visible>Container.OnPrevious</visible>
              <animation effect="rotatey" center="1223" end="55" time="200" reversible="false" tween="quadratic">Hidden</animation>
              <control type="image">
                <texture diffuse="thumbs/thumb_mask.png" fallback="DefaultVideo.png">$VAR[ShowcaseItem1Var]</texture>
                <include>MovieShowcaseThumb</include>
              </control>
              <control type="image">
                <texture>thumbs/boxes/$VAR[ShowcaseCase1Var]</texture>
                <include>MovieSchowcaseDVDCoverVars</include>
                <visible>Skin.HasSetting(toggleshowcasecovers)</visible>
              </control>
              <control type="image">
                <include>WatchedOverlayShowCase</include>
                <texture>$VAR[IconOverlay1Var]</texture>
                <visible>!Skin.HasSetting(Enable.Circles)</visible>
              </control>
              <control type="image">
                <posx>240</posx>
                <posy>22</posy>
                <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
                <width>36</width>
                <height>36</height>
                <aspectratio>keep</aspectratio>
                <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
                <texture>$VAR[IconOverlay1Var]</texture>
              </control>
              <control type="image">
                <posx>240</posx>
                <posy>348</posy>
                <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
                <width>36</width>
                <height>36</height>
                <aspectratio>keep</aspectratio>
                <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
                <texture>$VAR[IconOverlay1Var]</texture>
              </control>
              <control type="group">
                <posx>28</posx>
                <posy>22</posy>
                <include condition="!Skin.HasSetting(Disable.UnwatchedIcon)">UnwatchedIcon1</include>
              </control>
              <control type="image">
                <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="DefaultVideo.png">$VAR[ShowcaseItem1Var]</texture>
                <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
                <include>MovieShowcaseThumbReflection</include>
              </control>
            </control>
          </control>
        </control>
        <control type="group" id="6000">
          <posx>55</posx>
          <posy>570</posy>
          <visible>!Control.IsVisible(6001) + !Control.IsVisible(6002) + !Skin.HasSetting(ShowCase.Flat)</visible>
          <control type="group">
            <posx>15</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-6).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="-135" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="-135" end="55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="-1028" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem-6</include>
          </control>
          <control type="group">
            <posx>150</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-5).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="0" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="0" end="55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="-866" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem-5</include>
          </control>
          <control type="group">
            <posx>285</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-4).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="135" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="135" end="55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="-704" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem-4</include>
          </control>
          <control type="group">
            <posx>420</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-3).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="270" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="270" end="55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="-543" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem-3</include>
          </control>
          <control type="group">
            <posx>555</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-2).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="405" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="405" end="55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="-384" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem-2</include>
          </control>
          <control type="group">
            <posx>690</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(-1).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="540" start="-55" end="-55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="540" end="55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="-226" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem-1</include>
          </control>
          <control type="group">
            <posx>1500</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(6).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1965" start="55" end="55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="1965" end="-55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="1028" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem6</include>
          </control>
          <control type="group">
            <posx>1365</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(5).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1830" start="55" end="55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="1830" end="-55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="866" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem5</include>
          </control>
          <control type="group">
            <posx>1230</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(4).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1695" start="55" end="55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="1695" end="-55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="704" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem4</include>
          </control>
          <control type="group">
            <posx>1095</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(3).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1560" start="55" end="55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="1560" end="-55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="543" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem3</include>
          </control>
          <control type="group">
            <posx>960</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(2).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1425" start="55" end="55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="1425" end="-55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="384" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem2</include>
          </control>
          <control type="group">
            <posx>825</posx>
            <visible>!IsEmpty(Container(53).ListItemNoWrap(1).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
            <animation effect="rotatey" center="1290" start="55" end="55" time="0" condition="true">Conditional</animation>
            <animation type="Conditional" condition="Skin.HasSetting(ShowCase.Flat)">
							<effect type="rotatey" center="1290" end="-55" time="640" tween="cubic" easing="inout" />
							<effect type="slide" end="226" time="640" tween="cubic" easing="inout" />
						</animation>
            <include>MovieShowCaseItem1</include>
          </control>
          <control type="group">
            <posx>758</posx>
            <control type="group">
              <visible>!IsEmpty(Container(53).ListItemNoWrap(0).FolderPath) | !Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)</visible>
              <include>MovieShowCaseItem0</include>
            </control>
          </control>
        </control>
      </control>
      <include condition="Skin.HasSetting(HorizontalListNav) + !system.getbool(input.enablemouse)">scmfixed</include>
      <include condition="!Skin.HasSetting(HorizontalListNav) | system.getbool(input.enablemouse)">scmwrap</include>
      <control type="button">
        <visible>system.getbool(input.enablemouse)</visible>
        <posx>0</posx>
        <posy>0</posy>
        <width>791</width>
        <height>1080</height>
        <texturefocus>-</texturefocus>
        <texturenofocus>-</texturenofocus>
      </control>
      <control type="button">
        <visible>system.getbool(input.enablemouse)</visible>
        <posx>1129</posx>
        <posy>0</posy>
        <width>791</width>
        <height>1080</height>
        <texturefocus>-</texturefocus>
        <texturenofocus>-</texturenofocus>
      </control>
      <control type="scrollbar" id="61">
        <posx>110</posx>
        <posy>970</posy>
        <width>1680</width>
        <height>12</height>
        <onup>53</onup>
        <ondown>9010</ondown>
        <texturesliderbackground border="1">-</texturesliderbackground>
        <texturesliderbar border="6,0,6,0">scrollbar/texturesliderbar_hor.png</texturesliderbar>
        <texturesliderbarfocus border="6,0,6,0">scrollbar/texturesliderbarfocus_hor.png</texturesliderbarfocus>
        <textureslidernib>-</textureslidernib>
        <textureslidernibfocus>-</textureslidernibfocus>
        <showonepage>false</showonepage>
        <orientation>horizontal</orientation>
        <animation effect="fade" start="100" end="0" time="500" delay="500" condition="!Control.HasFocus(61) + !Container.Scrolling">Conditional</animation>
      </control>
    </control>
  </include>
  <include name="ShowCaseInfoPanel">
    <control type="group" id="12000">
      <visible>!IsEmpty(Control.GetLabel(4420)) + Control.IsVisible(4420) + ![ListItem.Type(directory) + !String.IsEqual(ListItem.Label,All Episodes)] + ![Control.IsVisible(53) + Skin.HasSetting(ShowCase.Flat)] + ![Control.IsVisible(52) + Skin.HasSetting(Landscape.Flat)]</visible>
      <animation effect="slide" start="0,-1200" end="0,0" time="720" tween="cubic">VisibleChange</animation>
      <animation effect="slide" start="0,-1200" end="0,0" time="720" tween="cubic">WindowOpen</animation>
      <animation effect="slide" end="0,-1200" start="0,0" time="720" tween="cubic">WindowClose</animation>
      <animation effect="slide" start="0,0" end="0,20" time="720" tween="cubic" condition="Control.IsVisible(52)">Conditional</animation>
      <posy>50</posy>
      <control type="image">
        <description>background image</description>
        <posx>106</posx>
        <posy>834</posy>
        <width>1706</width>
        <height>734</height>
        <texture border="40">panel_reflect.png</texture>
      </control>
      <control type="image">
        <description>background image</description>
        <posx>106</posx>
        <posy>130</posy>
        <width>1706</width>
        <height>734</height>
        <texture colordiffuse="E6FFFFFF" border="40">listpanel_back.png</texture>
      </control>
      <control type="group">
        <visible>String.IsEqual(Control.GetLabel(4420),1)</visible>
        <include>SettingsFadeEffect</include>
        <control type="grouplist">
          <posx>137</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(movies) | Container.PlexContent(episodes)</visible>
          <!-- Director -->
          <control type="button">
            <label>$VAR[InfoPanelDirector]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <!-- Writer -->
          <control type="button">
            <label>$VAR[InfoPanelWriter]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
        </control>
        <control type="grouplist">
          <posx>137</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(homemovies)</visible>
          <!-- Year -->
          <control type="button">
            <label>$VAR[InfoPanelYear]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
        </control>
        <control type="grouplist">
          <posx>137</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(tvshows) | Container.PlexContent(seasons)</visible>
          <!-- Genre -->
          <control type="button">
            <label>$VAR[InfoPanelGenre]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <!-- Studio -->
          <control type="button">
            <label>$VAR[InfoPanelStudio]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
        </control>
        <control type="image">
          <posx>638</posx>
          <posy>162</posy>
          <width>2</width>
          <height>178</height>
          <texture border="1">separator3.png</texture>
          <visible>!Container.PlexContent(homemovies) + ! Container.PlexContent(clips)</visible>
        </control>
        <control type="image">
          <posx>638</posx>
          <posy>162</posy>
          <width>2</width>
          <height>90</height>
          <texture border="1">separator3.png</texture>
          <visible>Container.PlexContent(homemovies)</visible>
        </control>
        <control type="grouplist">
          <posx>640</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(movies) | Container.PlexContent(episodes)</visible>
          <!-- Duration -->
          <control type="button">
            <label>$VAR[InfoPanelDuration]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <control type="group">
            <!-- Separator -->
            <control type="image">
              <posx>251</posx>
              <width>2</width>
              <height>89</height>
              <texture border="1">separator3.png</texture>
              <visible>!IsEmpty(ListItem.Property(hasUserRating)) | !IsEmpty(ListItem.RatingAndVotes)</visible>
            </control>
            <!-- Year -->
            <control type="button">
              <label>$VAR[InfoPanelYear]</label>
              <posx>0</posx>
              <width>500</width>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>Container.PlexContent(movies)</visible>
            </control>
            <!-- First Aired Date -->
            <control type="button">
              <label>$VAR[InfoPanelDate]</label>
              <posx>0</posx>
              <width>500</width>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>Container.PlexContent(episodes)</visible>
            </control>
            <!-- User Rating -->
            <control type="button">
              <posx>251</posx>
              <label>$VAR[InfoPanelUserRating]</label>
              <width>251</width>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>!IsEmpty(ListItem.Property(hasUserRating))</visible>
            </control>
            <!-- Standard Rating -->
            <control type="button">
              <posx>251</posx>
              <label>$VAR[InfoPanelRating]</label>
              <width>251</width>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + IsEmpty(ListItem.Property(ratingType)) + !IsEmpty(ListItem.RatingAndVotes)</visible>
            </control>
            <!-- IMDb Rating -->
            <control type="grouplist">
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + String.IsEqual(ListItem.Property(ratingType),imdb)</visible>
              <orientation>vertical</orientation>
              <posx>266</posx>
              <control type="label">
                <label>$VAR[InfoPanelRatingLabel]</label>
                <width>251</width>
                <height>45</height>
                <aligny>top</aligny>
                <font>font14</font>
                <textcolor>grey2</textcolor>
              </control>
              <control type="grouplist">
                <orientation>horizontal</orientation>
                <control type="image">
                  <width>51</width>
                  <height>40</height>
                  <aligny>center</aligny>
                  <texture>imdb_51x40.png</texture>
                  <aspectratio align="left" aligny="center">keep</aspectratio>
                </control>
                <control type="label">
                  <height>40</height>
                  <width min="20" max="121">auto</width>
                  <aligny>center</aligny>
                  <font>font14</font>
                  <textcolor>grey2</textcolor>
                  <label> $INFO[ListItem.Property(rating)]</label>
                </control>
              </control>
            </control>
            <!-- Rotten Tomatoes Rating -->
            <control type="grouplist">
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + String.IsEqual(ListItem.Property(ratingType),rottentomatoes)</visible>
              <orientation>vertical</orientation>
              <posx>266</posx>
              <control type="label">
                <label>$VAR[InfoPanelRatingLabel]</label>
                <width>251</width>
                <height>45</height>
                <aligny>top</aligny>
                <font>font14</font>
                <textcolor>grey2</textcolor>
              </control>
              <control type="grouplist">
                <orientation>horizontal</orientation>
                <control type="image">
                  <width>32</width>
                  <height>40</height>
                  <align>left</align>
                  <aligny>center</aligny>
                  <texture>rottentomatoes/32x32/$INFO[ListItem.Property(ratingImage)]</texture>
                  <aspectratio align="left" aligny="center">keep</aspectratio>
                </control>
                <control type="label">
                  <height>40</height>
                  <width min="20" max="121">auto</width>
                  <aligny>center</aligny>
                  <font>font14</font>
                  <textcolor>grey2</textcolor>
                  <label> $INFO[ListItem.Property(ratingPercent)]% </label>
                </control>
                <control type="image">
                  <width>32</width>
                  <height>40</height>
                  <aligny>center</aligny>
                  <texture>rottentomatoes/32x32/$INFO[ListItem.Property(audienceRatingImage)]</texture>
                  <aspectratio align="left" aligny="center">keep</aspectratio>
                </control>
                <control type="label">
                  <height>40</height>
                  <width min="20" max="121">auto</width>
                  <aligny>center</aligny>
                  <font>font14</font>
                  <textcolor>grey2</textcolor>
                  <label> $INFO[ListItem.Property(audienceRatingPercent)]%</label>
                </control>
              </control>
            </control>
            <control type="image">
              <posx>0</posx>
              <posy>30</posy>
              <width>251</width>
              <height>60</height>
              <texture border="1">separator2.png</texture>
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + !IsEmpty(ListItem.Property(ratingImage))</visible>
            </control>            
          </control>
        </control>
        <control type="grouplist">
          <posx>640</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(homemovies)</visible>
          <!-- Duration -->
          <control type="button">
            <label>$VAR[InfoPanelDuration]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
        </control>
        <control type="grouplist">
          <posx>640</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(tvshows) | Container.PlexContent(seasons)</visible>
          <!-- Number of Episodes -->
          <control type="button">
            <label>$VAR[InfoPanelEpisodes]</label>
            <width>502</width>
            <include>ShowCaseInfoPanelButtonsValues</include>
            <visible>Container.PlexContent(tvshows)</visible>
          </control>
          <control type="button">
            <label>$VAR[InfoPanelEpisodes2]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
            <visible>Container.PlexContent(seasons) + !String.IsEqual(ListItem.Label,All Episodes)</visible>
          </control>
          <control type="button">
            <label>-</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
            <visible>Container.PlexContent(seasons) + String.IsEqual(ListItem.Label,All Episodes)</visible>
          </control>
          <control type="group">
            <control type="button">
              <label>$VAR[InfoPanelDate]</label>
              <width>502</width>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>Container.PlexContent(tvshows)</visible>
            </control>
            <control type="button">
              <label>[COLOR $VAR[Colour_ShowcaseThemeColourVar]]$LOCALIZE[16101]:[/COLOR][CR]$INFO[ListItem.Property(UnWatchedEpisodes)]</label>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>Container.PlexContent(seasons)</visible>
            </control>
          </control>
        </control>
        <control type="textbox">
          <label>$VAR[PlotVar]</label>
          <posy>342</posy>
          <posx>152</posx>
          <width>970</width>
          <height>180</height>
          <font>font14_textbox2</font>
          <align>justify</align>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>!Skin.HasSetting(General.SmallPlotText) + !Container.PlexContent(homemovies) + !Container.PlexContent(clips)</visible>
        </control>
        <control type="textbox">
          <label>$VAR[PlotVar]</label>
          <posy>342</posy>
          <posx>152</posx>
          <width>970</width>
          <height>180</height>
          <font>font14_textbox2_landscape</font>
          <align>justify</align>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>Skin.HasSetting(General.SmallPlotText) + !Container.PlexContent(homemovies) + !Container.PlexContent(clips)</visible>
        </control>
        <control type="textbox">
          <label>$VAR[PlotVar]</label>
          <posy>252</posy>
          <posx>152</posx>
          <width>970</width>
          <height>270</height>
          <font>font14_textbox2</font>
          <align>justify</align>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>!Skin.HasSetting(General.SmallPlotText) + Container.PlexContent(homemovies) + !Container.PlexContent(clips)</visible>
        </control>
        <control type="textbox">
          <label>$VAR[PlotVar]</label>
          <posy>252</posy>
          <posx>152</posx>
          <width>970</width>
          <height>270</height>
          <font>font14_textbox2_landscape</font>
          <align>justify</align>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>Skin.HasSetting(General.SmallPlotText) + !Container.PlexContent(homemovies) + Container.PlexContent(clips)</visible>
        </control>
        <control type="textbox">
          <label>$VAR[PlotVar]</label>
          <posy>164</posy>
          <posx>152</posx>
          <width>970</width>
          <height>355</height>
          <font>font14_textbox2</font>
          <align>justify</align>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>!Skin.HasSetting(General.SmallPlotText) + !Container.PlexContent(homemovies) + Container.PlexContent(clips)</visible>
        </control>
        <control type="textbox">
          <label>$VAR[PlotVar]</label>
          <posy>164</posy>
          <posx>152</posx>
          <width>970</width>
          <height>355</height>
          <font>font14_textbox2_landscape</font>
          <align>justify</align>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>Skin.HasSetting(General.SmallPlotText) + Container.PlexContent(homemovies) + Container.PlexContent(clips)</visible>
        </control>
        <control type="image">
          <posx>137</posx>
          <posy>464</posy>
          <width>1643</width>
          <height>60</height>
          <texture border="1">separator2.png</texture>
        </control>
        <control type="image">
          <posx>1142</posx>
          <posy>162</posy>
          <width>640</width>
          <height>360</height>
          <fadetime>200</fadetime>
          <aspectratio>scale</aspectratio>
          <texture>$INFO[ListItem.Art(fanart)]</texture>
          <bordertexture border="1,1,2,1">empty.png</bordertexture>
          <bordersize>1,1,2,1</bordersize>
          <visible>!Container.PlexContent(clips)</visible>
        </control>
        <control type="image">
          <posx>1142</posx>
          <posy>162</posy>
          <width>640</width>
          <height>360</height>
          <fadetime>200</fadetime>
          <aspectratio>scale</aspectratio>
          <texture>$INFO[ListItem.Art(bigThumb)]</texture>
          <bordertexture border="1,1,2,1">empty.png</bordertexture>
          <bordersize>1,1,2,1</bordersize>
          <visible>Container.PlexContent(clips)</visible>
        </control>
      </control>
      <!-- Icon Infopanel -->
      <control type="group">
        <visible>String.IsEqual(Control.GetLabel(4420),2)</visible>
        <include>SettingsFadeEffect</include>
        <control type="grouplist">
          <posx>137</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(movies) | Container.PlexContent(episodes)</visible>
          <!-- Director -->
          <control type="button">
            <label>$VAR[InfoPanelDirector]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <!-- Writer -->
          <control type="button">
            <label>$VAR[InfoPanelWriter]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <!-- Duration -->
          <control type="button">
            <label>$VAR[InfoPanelDuration]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <control type="group">
            <!-- Separator -->
            <control type="image">
              <posx>251</posx>
              <width>2</width>
              <height>90</height>
              <texture border="1">separator3.png</texture>
              <visible>!IsEmpty(ListItem.Property(hasUserRating)) | !IsEmpty(ListItem.RatingAndVotes)</visible>
            </control>
            <!-- Year -->
            <control type="button">
              <label>$VAR[InfoPanelYear]</label>
              <posx>0</posx>
              <width>500</width>
              <height>92</height>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>Container.PlexContent(movies)</visible>
            </control>
            <!-- First Aired Date -->
            <control type="button">
              <label>$VAR[InfoPanelDate]</label>
              <posx>0</posx>
              <width>500</width>
              <height>92</height>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>Container.PlexContent(episodes)</visible>
            </control>
            <!-- User Rating -->
            <control type="button">
              <posx>251</posx>
              <label>$VAR[InfoPanelUserRating]</label>
              <width>251</width>
              <texturefocus border="0">empty.png</texturefocus>
              <texturenofocus border="0">empty.png</texturenofocus>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>!IsEmpty(ListItem.Property(hasUserRating))</visible>
            </control>
            <!-- Standard Rating -->
            <control type="button">
              <posx>251</posx>
              <label>$VAR[InfoPanelRating]</label>
              <width>251</width>
              <texturefocus border="0">empty.png</texturefocus>
              <texturenofocus border="0">empty.png</texturenofocus>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + IsEmpty(ListItem.Property(ratingType)) + !IsEmpty(ListItem.RatingAndVotes)</visible>
            </control>
            <!-- IMDb Rating -->
            <control type="grouplist">
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + String.IsEqual(ListItem.Property(ratingType),imdb)</visible>
              <orientation>vertical</orientation>
              <posx>266</posx>
              <control type="label">
                <label>$VAR[InfoPanelRatingLabel]</label>
                <width>251</width>
                <height>45</height>
                <aligny>top</aligny>
                <font>font14</font>
                <textcolor>grey2</textcolor>
              </control>
              <control type="grouplist">
                <orientation>horizontal</orientation>
                <control type="image">
                  <width>51</width>
                  <height>40</height>
                  <aligny>center</aligny>
                  <texture>imdb_51x40.png</texture>
                  <aspectratio align="left" aligny="center">keep</aspectratio>
                </control>
                <control type="label">
                  <height>40</height>
                  <width min="20" max="121">auto</width>
                  <aligny>center</aligny>
                  <font>font14</font>
                  <textcolor>grey2</textcolor>
                  <label> $INFO[ListItem.Property(rating)]</label>
                </control>
              </control>
            </control>
            <!-- Rotten Tomatoes Rating -->
            <control type="grouplist">
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + String.IsEqual(ListItem.Property(ratingType),rottentomatoes)</visible>
              <orientation>vertical</orientation>
              <posx>266</posx>
              <control type="label">
                <label>$VAR[InfoPanelRatingLabel]</label>
                <width>251</width>
                <height>45</height>
                <aligny>top</aligny>
                <font>font14</font>
                <textcolor>grey2</textcolor>
              </control>
              <control type="grouplist">
                <orientation>horizontal</orientation>
                <control type="image">
                  <width>32</width>
                  <height>40</height>
                  <align>left</align>
                  <aligny>center</aligny>
                  <texture>rottentomatoes/32x32/$INFO[ListItem.Property(ratingImage)]</texture>
                  <aspectratio align="left" aligny="center">keep</aspectratio>
                </control>
                <control type="label">
                  <height>40</height>
                  <width min="20" max="121">auto</width>
                  <aligny>center</aligny>
                  <font>font14</font>
                  <textcolor>grey2</textcolor>
                  <label> $INFO[ListItem.Property(ratingPercent)]% </label>
                </control>
                <control type="image">
                  <width>32</width>
                  <height>40</height>
                  <aligny>center</aligny>
                  <texture>rottentomatoes/32x32/$INFO[ListItem.Property(audienceRatingImage)]</texture>
                  <aspectratio align="left" aligny="center">keep</aspectratio>
                </control>
                <control type="label">
                  <height>40</height>
                  <width min="20" max="121">auto</width>
                  <aligny>center</aligny>
                  <font>font14</font>
                  <textcolor>grey2</textcolor>
                  <label> $INFO[ListItem.Property(audienceRatingPercent)]%</label>
                </control>
              </control>
            </control>            
          </control>
        </control>
        <control type="grouplist">
          <posx>137</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(homemovies)</visible>
          <!-- Year -->
          <control type="button">
            <label>$VAR[InfoPanelYear]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <!-- Duration -->
          <control type="button">
            <label>$VAR[InfoPanelDuration]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <control type="group">
            <!-- User Rating -->
            <control type="button">
              <label>$VAR[InfoPanelUserRating]</label>
              <width>251</width>
              <height>92</height>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>!IsEmpty(ListItem.Property(hasUserRating))</visible>
            </control>
            <!-- Standard Rating -->
            <control type="button">
              <label>$VAR[InfoPanelRating]</label>
              <width>251</width>
              <height>92</height>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + IsEmpty(ListItem.Property(ratingImage)) + !IsEmpty(ListItem.RatingAndVotes)</visible>
            </control>
          </control>
        </control>        
        <control type="grouplist">
          <posx>137</posx>
          <posy>162</posy>
          <visible>Container.PlexContent(tvshows) | Container.PlexContent(seasons)</visible>
          <!-- Genre -->
          <control type="button">
            <label>$VAR[InfoPanelGenre]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <!-- Network -->
          <control type="button">
            <label>$VAR[InfoPanelStudio]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
          </control>
          <!-- Number of Episodes -->
          <control type="button">
            <label>$VAR[InfoPanelEpisodes]</label>
            <height>92</height>
            <include>ShowCaseInfoPanelButtonsValues</include>
            <visible>Container.PlexContent(tvshows)</visible>
          </control>
          <control type="button">
            <label>$VAR[InfoPanelEpisodes2]</label>
            <include>ShowCaseInfoPanelButtonsValues</include>
            <visible>Container.PlexContent(seasons) + !ListItem.Type(directory)</visible>
          </control>
          <!-- Unwatched Episodes -->
          <control type="button">
            <label>$VAR[InfoPanelUnwatched]</label>
            <height>92</height>
            <include>ShowCaseInfoPanelButtonsValues</include>
            <visible>Container.PlexContent(seasons)</visible>
          </control>
          <control type="button">
            <label> </label>
            <include>ShowCaseInfoPanelButtonsValues</include>
            <visible>Container.PlexContent(seasons) + ListItem.Type(directory)</visible>
          </control>
          <control type="group">
            <visible>!Container.PlexContent(seasons)</visible>
            <!-- First Aired Date -->
            <control type="button">
              <label>$VAR[InfoPanelDate]</label>
              <width>500</width>
              <height>90</height>
              <include>ShowCaseInfoPanelButtonsValues</include>
            </control>
            <!-- Separator -->
            <control type="image">
              <posx>251</posx>
              <width>2</width>
              <height>88</height>
              <texture border="1">separator3.png</texture>
              <visible>!IsEmpty(ListItem.RatingAndVotes)</visible>
            </control>
            <!-- Rating -->
            <control type="button">
              <posx>251</posx>
              <width>251</width>
              <label>$VAR[InfoPanelRating]</label>
              <height>90</height>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>IsEmpty(ListItem.Property(hasUserRating)) + !IsEmpty(ListItem.RatingAndVotes)</visible>
            </control>
            <!-- User Rating -->
            <control type="button">
              <posx>251</posx>
              <width>251</width>
              <label>$VAR[InfoPanelUserRating]</label>
              <height>90</height>
              <include>ShowCaseInfoPanelButtonsValues</include>
              <visible>!IsEmpty(ListItem.Property(hasUserRating))</visible>
            </control>            
          </control>
        </control>
        <!-- Separator -->
        <control type="image">
          <posx>638</posx>
          <posy>162</posy>
          <width>2</width>
          <height>359</height>
          <texture border="1">separator3.png</texture>
        </control>
        <!-- Plot Summary -->
        <control type="textbox">
          <posx>655</posx>
          <label>$VAR[PlotVar]</label>
          <posy>162</posy>
          <width>800</width>
          <height>354</height>
          <font>font14_textbox</font>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>!Skin.HasSetting(General.SmallPlotText)</visible>
        </control>
        <control type="textbox">
          <posx>655</posx>
          <label>$VAR[PlotVar]</label>
          <posy>162</posy>
          <width>800</width>
          <height>354</height>
          <font>font14_textbox_landscape</font>
          <autoscroll time="3000" delay="6000" repeat="5000">Skin.HasSetting(Enable.AutoScroll)</autoscroll>
          <include>ShowCaseInfoPanelButtonsValues</include>
          <visible>Skin.HasSetting(General.SmallPlotText)</visible>
        </control>
        <!-- Separator -->
        <control type="image">
          <posx>637</posx>
          <posy>464</posy>
          <width>1141</width>
          <height>60</height>
          <texture border="1">separator2.png</texture>
        </control>
        <!-- Poster -->
        <control type="image">
          <posx>1542</posx>
          <posy>162</posy>
          <width>240</width>
          <height>360</height>
          <fadetime>200</fadetime>
          <aspectratio align="center" aligny="top">scale</aspectratio>
          <texture>$INFO[ListItem.Art(thumb)]</texture>
          <bordertexture border="1,1,2,1">empty.png</bordertexture>
          <bordersize>1,1,2,1</bordersize>
        </control>
      </control>
    </control>
  </include>
  <include name="scmfixed">
    <control type="fixedlist" id="53">
      <include>contents53list</include>
    </control>
  </include>
  <include name="scmwrap">
    <control type="wraplist" id="53">
      <include>contents53list</include>
    </control>
  </include>
  <include name="contents53list">
    <posx>-69</posx>
    <posy>540</posy>
    <width>2058</width>
    <height>525</height>
    <onleft>53</onleft>
    <onright>53</onright>
    <onup>SetProperty(MediaMenu,True,home)</onup>
    <onup>SetFocus(9050,0)</onup>
    <ondown>noop</ondown>
    <visible>Container.PlexContent(movies) | [Container.PlexContent(homemovies) + Skin.HasSetting(Advanced.PortraitHomeVideos)] | Container.Content(tvshows) | Container.Content(musicvideos) | Container.Content(seasons)</visible>
    <viewtype label="31077">bigwrap</viewtype>
    <pagecontrol>61</pagecontrol>
    <scrolltime tween="quadratic">300</scrolltime>
    <focusposition>3</focusposition>
    <orientation>horizontal</orientation>
    <preloaditems>2</preloaditems>
    <itemlayout height="525" width="155" condition="![Skin.HasSetting(ShowCase.Flat) + !Control.IsVisible(6000)]" />
		<focusedlayout height="525" width="155" condition="![Skin.HasSetting(ShowCase.Flat) + !Control.IsVisible(6000)]" />
		<itemlayout height="525" width="294" condition="Skin.HasSetting(ShowCase.Flat)">
			<control type="group">
				<posy>30</posy>
				<animation effect="fade" time="0" delay="800">Visible</animation>
				<control type="image">
					<texture background="true" fallback="defaultmovies.png">$VAR[ShowcaseItem0Var]</texture>
					<include>MovieShowcaseThumb</include>
          <visible>ListItem.Type(movie)</visible>
				</control>
        <control type="image">
					<texture background="true" fallback="defaulttvshows.png">$VAR[ShowcaseItem0Var]</texture>
					<include>MovieShowcaseThumb</include>
          <visible>ListItem.Type(show) | ListItem.Type(season)</visible>
				</control>
        <control type="image">
					<texture background="true" fallback="defaultfolder.png">$VAR[ShowcaseItem0Var]</texture>
					<include>MovieShowcaseThumb</include>
          <visible>ListItem.Type(directory)</visible>
				</control>
				<control type="image">
					<texture background="true" flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem0Var]</texture>
					<include>MovieShowcaseThumbReflection</include>
          <visible>ListItem.Type(movie)</visible>
				</control>
        <control type="image">
					<texture background="true" flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem0Var]</texture>
					<include>MovieShowcaseThumbReflection</include>
          <visible>ListItem.Type(show) | ListItem.Type(season)</visible>
				</control>
        <control type="image">
					<texture background="true" flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem0Var]</texture>
					<include>MovieShowcaseThumbReflection</include>
          <visible>ListItem.Type(directory)</visible>
				</control>
				<control type="image">
          <include>WatchedOverlayShowCase</include>
          <texture>$VAR[IconOverlay0Var]</texture>
          <visible>!Skin.HasSetting(Enable.Circles)</visible>
        </control>
        <control type="image">
          <posx>230</posx>
          <posy>22</posy>
          <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
          <width>36</width>
          <height>36</height>
          <aspectratio>keep</aspectratio>
          <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
          <texture>$VAR[IconOverlay0Var]</texture>
        </control>
        <control type="image">
          <posx>230</posx>
          <posy>348</posy>
          <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
          <width>36</width>
          <height>36</height>
          <aspectratio>keep</aspectratio>
          <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
          <texture>$VAR[IconOverlay0Var]</texture>
        </control>
        <control type="group">
          <posx>28</posx>
          <posy>22</posy>
          <include>UnwatchedIcon</include>
          <visible>!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)</visible>
        </control>
        <control type="group">
          <posx>28</posx>
          <posy>348</posy>
          <include>UnwatchedIcon</include>
          <visible>!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)</visible>
        </control>
      </control>
		</itemlayout>
		<focusedlayout height="525" width="294" condition="Skin.HasSetting(ShowCase.Flat)">
			<control type="group">
				<posy>30</posy>
				<animation effect="fade" time="0" delay="800">Visible</animation>
				<animation effect="zoom" start="75" end="100" center="147,345" time="300" reversible="false" tween="cubic">Focus</animation>
				<control type="group">
					<control type="image">
						<texture background="true" fallback="defaultmovies.png">$VAR[ShowcaseItem0Var]</texture>
						<include>MovieShowcaseThumb</include>
            <visible>ListItem.Type(movie)</visible>
					</control>
          <control type="image">
						<texture background="true" fallback="defaulttvshows.png">$VAR[ShowcaseItem0Var]</texture>
						<include>MovieShowcaseThumb</include>
            <visible>ListItem.Type(show) | ListItem.Type(season)</visible>
					</control>
          <control type="image">
						<texture background="true" fallback="defaultfolder.png">$VAR[ShowcaseItem0Var]</texture>
						<include>MovieShowcaseThumb</include>
            <visible>ListItem.Type(directory)</visible>
					</control>
					<control type="image">
            <include>WatchedOverlayShowCase</include>
            <texture>$VAR[IconOverlay0Var]</texture>
            <visible>!Skin.HasSetting(Enable.Circles)</visible>
          </control>
          <control type="image">
            <posx>230</posx>
            <posy>22</posy>
            <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
            <width>36</width>
            <height>36</height>
            <aspectratio>keep</aspectratio>
            <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
            <texture>$VAR[IconOverlay0Var]</texture>
          </control>
          <control type="image">
            <posx>230</posx>
            <posy>348</posy>
            <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
            <width>36</width>
            <height>36</height>
            <aspectratio>keep</aspectratio>
            <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
            <texture>$VAR[IconOverlay0Var]</texture>
          </control>
          <control type="group">
            <posx>28</posx>
            <posy>22</posy>
            <include>UnwatchedIcon</include>
            <visible>!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)</visible>
          </control>
          <control type="group">
            <posx>28</posx>
            <posy>348</posy>
            <include>UnwatchedIcon</include>
            <visible>!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)</visible>
          </control>
					<control type="image">
						<texture background="true" flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem0Var]</texture>
						<include>MovieShowcaseThumbReflection</include>
            <visible>ListItem.Type(movie)</visible>
					</control>
          <control type="image">
						<texture background="true" flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem0Var]</texture>
						<include>MovieShowcaseThumbReflection</include>
            <visible>ListItem.Type(show) | ListItem.Type(season)</visible>
					</control>
          <control type="image">
						<texture background="true" flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem0Var]</texture>
						<include>MovieShowcaseThumbReflection</include>
            <visible>ListItem.Type(directory)</visible>
					</control>
				</control>
			</control>
		</focusedlayout>
  </include>
  <include name="MovieShowcaseThumb">
    <posx>-4</posx>
    <posy>-11</posy>
    <width>304</width>
    <height>426</height>
    <align>center</align>
    <aspectratio scalediffuse="false">scale</aspectratio>
    <fadetime>0</fadetime>
    <bordertexture border="20">thumbs/thumb_shadow_aa.png</bordertexture>
    <bordersize>20</bordersize>
  </include>
  <include name="MovieShowcaseThumbReflection">
    <aspectratio scalediffuse="false" aligny="top">scale</aspectratio>
    <fadetime>0</fadetime>
    <posx>16</posx>
    <posy>395</posy>
    <width>264</width>
    <height>386</height>
    <colordiffuse>d1FFFFFF</colordiffuse>
  </include>
  <include name="WatchedOverlayShowCase">
    <posx>180</posx>
    <posy>-11</posy>
    <width>120</width>
    <height>120</height>
    <fadetime>0</fadetime>
    <bordersize>20</bordersize>
  </include>
  <include name="WatchedOverlayShowCase2">
    <posx>195</posx>
    <posy>-45</posy>
    <width>120</width>
    <height>120</height>
    <fadetime>0</fadetime>
    <bordersize>20</bordersize>
  </include>
  <include name="MovieShowCaseItem-7">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-7Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-7).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-7Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-7).Type(show) | ListItem(-7).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-7Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-7).Type(directory)</visible>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-7</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-7</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-7Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-7).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-7Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-7).Type(show) | ListItem(-7).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-7Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-7).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem-6">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-6Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-6).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-6Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-6).Type(show) | ListItem(-6).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-6Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-6).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase-6Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-6</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-6</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-6Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>121</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-6).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-6Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>121</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-6).Type(show) | ListItem(-6).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-6Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>121</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-6).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem-5">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-5Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-5).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-5Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-5).Type(show) | ListItem(-5).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-5Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-5).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase-5Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-5</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-5</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-5Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>131</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-5).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-5Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>131</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-5).Type(show) | ListItem(-5).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-5Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>131</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-5).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem-4">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-4Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-4).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-4Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-4).Type(show) | ListItem(-4).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-4Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-4).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase-4Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-4</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-4</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-4Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>145</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-4).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-4Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>145</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-4).Type(show) | ListItem(-4).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-4Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>145</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-4).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem-3">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-3Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-3).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-3Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-3).Type(show) | ListItem(-3).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-3Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-3).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase-3Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-3</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-3</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-3Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>160</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-3).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-3Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>160</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-3).Type(show) | ListItem(-3).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-3Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>160</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-3).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem-2">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-2Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-2).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-2Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-2).Type(show) | ListItem(-2).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-2Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-2).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase-2Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-2</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-2</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-2Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>179</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-2).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-2Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>179</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-2).Type(show) | ListItem(-2).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-2Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>179</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-2).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem-1">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-1Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-1).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-1Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-1).Type(show) | ListItem(-1).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-1Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(-1).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase-1Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay-1Var]</texture>
      <visible>!Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>230</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay-1Var]</texture>
    </control>
    <control type="image">
      <posx>230</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay-1Var]</texture>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-1</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon-1</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem-1Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>180</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-1).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem-1Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>180</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-1).Type(show) | ListItem(-1).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem-1Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="left">scale</aspectratio>
      <width>180</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(-1).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem0">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem0Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem.Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem0Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem.Type(show) | ListItem.Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem0Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem.Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase0Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay0Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay0Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>230</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay0Var]</texture>
    </control>
    <control type="image">
      <posx>230</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay0Var]</texture>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon0</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon0</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem0Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem.Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem0Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem.Type(show) | ListItem.Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem0Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem.Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem1">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem1Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(1).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem1Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(1).Type(show) | ListItem(1).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem1Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(1).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase1Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay1Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay1Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay1Var]</texture>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay1Var]</texture>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>22</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + !Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon1</include>
    </control>
    <control type="group">
      <posx>28</posx>
      <posy>348</posy>
      <include condition="!Skin.HasSetting(Disable.UnwatchedIcon) + Skin.HasSetting(Enable.LowerCircles)">UnwatchedIcon1</include>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem1Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>86</posx>
      <width>192</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(1).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem1Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>86</posx>
      <width>192</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(1).Type(show) | ListItem(1).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem1Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>86</posx>
      <width>192</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(1).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem2">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem2Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(2).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem2Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(2).Type(show) | ListItem(2).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem2Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(2).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase2Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay2Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay2Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay2Var]</texture>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay2Var]</texture>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem2Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>102</posx>
      <width>177</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(2).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem2Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>102</posx>
      <width>177</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(2).Type(show) | ListItem(2).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem2Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>102</posx>
      <width>177</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(2).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem3">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem3Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(3).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem3Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(3).Type(show) | ListItem(3).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem3Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(3).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase3Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay3Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay3Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay3Var]</texture>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay3Var]</texture>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem3Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>121</posx>
      <width>158</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(3).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem3Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>121</posx>
      <width>158</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(3).Type(show) | ListItem(3).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem3Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>121</posx>
      <width>158</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(3).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem4">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem4Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(4).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem4Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(4).Type(show) | ListItem(4).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem4Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(4).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase4Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay4Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay4Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay4Var]</texture>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay4Var]</texture>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem4Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>136</posx>
      <width>142</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(4).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem4Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>136</posx>
      <width>142</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(4).Type(show) | ListItem(4).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem4Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>136</posx>
      <width>142</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(4).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem5">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem5Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(5).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem5Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(5).Type(show) | ListItem(5).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem5Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(5).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase5Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay5Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay5Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay5Var]</texture>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay5Var]</texture>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem5Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>146</posx>
      <width>133</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(5).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem5Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>146</posx>
      <width>133</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(5).Type(show) | ListItem(5).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem5Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>146</posx>
      <width>133</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(5).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem6">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem6Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(6).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem6Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(6).Type(show) | ListItem(6).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem6Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(6).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase6Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay6Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay6Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay6Var]</texture>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay6Var]</texture>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem6Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>158</posx>
      <width>122</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(6).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem6Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>158</posx>
      <width>122</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(6).Type(show) | ListItem(6).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem6Var]</texture>
      <aspectratio scalediffuse="false" aligny="top" align="right">scale</aspectratio>
      <posx>158</posx>
      <width>122</width>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(6).Type(directory)</visible>
    </control>
  </include>
  <include name="MovieShowCaseItem7">
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultmovies.png">$VAR[ShowcaseItem7Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(7).Type(movie)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem7Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(7).Type(show) | ListItem(7).Type(season)</visible>
    </control>
    <control type="image">
      <texture diffuse="thumbs/thumb_mask.png" fallback="defaultfolder.png">$VAR[ShowcaseItem7Var]</texture>
      <include>MovieShowcaseThumb</include>
      <visible>ListItem(7).Type(directory)</visible>
    </control>
    <control type="image">
      <texture>thumbs/boxes/$VAR[ShowcaseCase7Var]</texture>
      <include>MovieSchowcaseDVDCoverVars</include>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase</include>
      <texture>$VAR[IconOverlay7Var]</texture>
      <visible>[!Skin.HasSetting(toggleshowcasecovers) | [Skin.HasSetting(toggleshowcasecovers) + !Container.Content(movies)]] + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <include>WatchedOverlayShowCase2</include>
      <texture>$VAR[IconOverlay7Var]</texture>
      <visible>Skin.HasSetting(toggleshowcasecovers) + Container.Content(movies) + !Skin.HasSetting(Enable.Circles)</visible>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>22</posy>
      <visible>Skin.HasSetting(Enable.Circles) + !Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay7Var]</texture>
    </control>
    <control type="image">
      <posx>240</posx>
      <posy>348</posy>
      <visible>Skin.HasSetting(Enable.Circles) + Skin.HasSetting(Enable.LowerCircles)</visible>
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <colordiffuse>$VAR[Colour_ShowcaseWatchedStatusColourVar]</colordiffuse>
      <texture>$VAR[IconOverlay7Var]</texture>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultmovies.png">$VAR[ShowcaseItem7Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(7).Type(movie)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaulttvshows.png">$VAR[ShowcaseItem7Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(7).Type(show) | ListItem(7).Type(season)</visible>
    </control>
    <control type="image">
      <texture flipy="true" diffuse="thumbs/thumb_diffuse.png" fallback="defaultfolder.png">$VAR[ShowcaseItem7Var]</texture>
      <include>MovieShowcaseThumbReflection</include>
      <visible>ListItem(7).Type(directory)</visible>
    </control>
  </include>
  <variable name="ShowcaseItem-7Var">
    <value>$INFO[ListItem(-7).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem-6Var">
    <value>$INFO[ListItem(-6).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem-5Var">
    <value>$INFO[ListItem(-5).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem-4Var">
    <value>$INFO[ListItem(-4).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem-3Var">
    <value>$INFO[ListItem(-3).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem-2Var">
    <value>$INFO[ListItem(-2).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem-1Var">
    <value>$INFO[ListItem(-1).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem0Var">
    <value>$INFO[ListItem.Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem1Var">
    <value>$INFO[ListItem(1).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem2Var">
    <value>$INFO[ListItem(2).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem3Var">
    <value>$INFO[ListItem(3).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem4Var">
    <value>$INFO[ListItem(4).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem5Var">
    <value>$INFO[ListItem(5).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem6Var">
    <value>$INFO[ListItem(6).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem7Var">
    <value>$INFO[ListItem(7).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem8Var">
    <value>$INFO[ListItem(8).Art(thumb)]</value>
  </variable>
  <variable name="ShowcaseItem9Var">
    <value>$INFO[ListItem(9).Art(thumb)]</value>
  </variable>
  <variable name="IconOverlay-1Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(-1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(-1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(-1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(-1).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(-1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(-1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(-1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(-1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(-1).Overlay]</value>
  </variable>
  <variable name="IconOverlay0Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem.Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem.Overlay]</value>
  </variable>
  <variable name="IconOverlay1Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(1).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(1).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(1).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(1).Overlay]</value>
  </variable>
  <variable name="IconOverlay2Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(2).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(2).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(2).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(2).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(2).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(2).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(2).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(2).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(2).Overlay]</value>
  </variable>
  <variable name="IconOverlay3Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(3).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(3).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(3).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(3).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(3).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(3).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(3).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(3).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(3).Overlay]</value>
  </variable>
  <variable name="IconOverlay4Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(4).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(4).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(4).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(4).Overlay]</value>
    <!-- Circle -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(4).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(4).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(4).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(4).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(4).Overlay]</value>
  </variable>
  <variable name="IconOverlay5Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(5).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(5).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(5).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(5).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(5).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(5).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(5).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(5).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(5).Overlay]</value>
  </variable>
  <variable name="IconOverlay6Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(6).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(6).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(6).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(6).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(6).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(6).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(6).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(6).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(6).Overlay]</value>
  </variable>
  <variable name="IconOverlay7Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(7).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(7).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(7).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(7).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(7).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(7).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(7).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(7).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(7).Overlay]</value>
  </variable>
  <variable name="IconOverlay8Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(8).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(8).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(8).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(8).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(8).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(8).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(8).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(8).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(8).Overlay]</value>
  </variable>
  <variable name="IconOverlay9Var">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem(9).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem(9).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem(9).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem(9).Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem(9).Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem(9).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem(9).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem(9).Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem(9).Overlay]</value>
  </variable>
  <variable name="ShowcaseCase-6Var">
    <value condition="String.Contains(Container(53).ListItem(-6).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(-6).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(-6).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(-6).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase-5Var">
    <value condition="String.Contains(Container(53).ListItem(-5).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(-5).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(-5).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(-5).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase-4Var">
    <value condition="String.Contains(Container(53).ListItem(-4).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(-4).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(-4).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(-4).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase-3Var">
    <value condition="String.Contains(Container(53).ListItem(-3).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(-3).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(-3).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(-3).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase-2Var">
    <value condition="String.Contains(Container(53).ListItem(-2).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(-2).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(-2).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(-2).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase-1Var">
    <value condition="String.Contains(Container(53).ListItem(-1).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(-1).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(-1).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(-1).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase0Var">
    <value condition="String.Contains(Container(53).ListItem(0).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(0).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(0).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem.VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase1Var">
    <value condition="String.Contains(Container(53).ListItem(1).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(1).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(1).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(1).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase2Var">
    <value condition="String.Contains(Container(53).ListItem(2).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(2).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(2).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(2).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase3Var">
    <value condition="String.Contains(Container(53).ListItem(3).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(3).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(3).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(3).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase4Var">
    <value condition="String.Contains(Container(53).ListItem(4).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(4).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(4).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(4).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase5Var">
    <value condition="String.Contains(Container(53).ListItem(5).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(5).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(5).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(5).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase6Var">
    <value condition="String.Contains(Container(53).ListItem(6).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(6).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(6).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(6).VideoResolution]p.png</value>
  </variable>
  <variable name="ShowcaseCase7Var">
    <value condition="String.Contains(Container(53).ListItem(7).Filename,.3D.)">3d.png</value>
    <value condition="String.Contains(Container(53).ListItem(7).Filename,hdtv)">hdtv.png</value>
    <value condition="String.Contains(Container(53).ListItem(7).Filename,screener)">screener.png</value>
    <value>$INFO[Container(53).ListItem(7).VideoResolution]p.png</value>
  </variable>
  <include name="MovieSchowcaseDVDCoverVars">
    <posx>-38</posx>
    <posy>-27</posy>
    <width>335</width>
    <height>437</height>
    <fadetime>0</fadetime>
    <visible>Skin.HasSetting(toggleshowcasecovers) + [container.content(movies) | Container.Content(musicvideos)]</visible>
  </include>
  <include name="UnwatchedIconCircle">
    <control type="image">
      <width>36</width>
      <height>36</height>
      <aspectratio>keep</aspectratio>
      <texture>circle.png</texture>
    </control>
  </include>
  <include name="UnwatchedIconVars">
    <posy>2</posy>
    <width>36</width>
    <height>36</height>
    <align>center</align>
    <aligny>top</aligny>
    <font>font10</font>
    <textcolor>FF000000</textcolor>
    <scroll>false</scroll>
  </include>
  <include name="UnwatchedIcon">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem.Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <posx>18</posx>
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem.Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon1">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(1).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(1).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon0">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem.Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem.Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon-1">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(-1).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(-1).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon-2">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(-2).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(-2).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon-3">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(-3).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(-3).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon-4">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(-4).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(-4).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon-5">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(-5).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(-5).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon-6">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(-6).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(-6).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
  <include name="UnwatchedIcon-7">
    <control type="group">
      <visible>[Container.Content(tvshows) | Container.Content(seasons)] + IntegerGreaterThan(ListItem(-7).Property(UnWatchedEpisodes),0)</visible>
      <include>UnwatchedIconCircle</include>
      <control type="label">
        <include>UnwatchedIconVars</include>
        <label>$INFO[ListItem(-7).Property(UnWatchedEpisodes)]</label>
      </control>
    </control>
  </include>
</includes>
