<?xml version="1.0" encoding="UTF-8"?>
<includes>
  <!-- Watched Status Indicator -->
  <variable name="OverlayVar">
    <!-- Ribbons -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/0/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/1/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/2/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/3/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/4/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/5/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/6/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + !Skin.HasSetting(Enable.Circles)">overlays/showcase/7/$INFO[ListItem.Overlay]</value>
    <!-- Circles -->
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/0/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/1/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/2/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/3/$INFO[ListItem.Overlay]</value>
    <value condition="!Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/4/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/5/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + !Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/6/$INFO[ListItem.Overlay]</value>
    <value condition="Skin.HasSetting(Disable.Resumable) + Skin.HasSetting(Disable.Unwatched) + !Skin.HasSetting(Disable.Watched) + Skin.HasSetting(Enable.Circles)">overlays/circle/7/$INFO[ListItem.Overlay]</value>
  </variable>
  <!-- Watched Status Indicator for Lists -->
  <variable name="ListItem.Overlay">
    <value condition="ListItem.IsResumable">overlays/list/resumable.png</value>
    <value>$INFO[ListItem.Overlay,overlays/list/]</value>
  </variable>
  <!-- Unwatched Episode Count -->
  <variable name="ListOverlayEpisodesVar">
    <value condition="IntegerGreaterThan(ListItem.Property(UnWatchedEpisodes),99)">99 +</value>
    <value>$INFO[ListItem.Property(UnWatchedEpisodes)]</value>
  </variable>
</includes>
